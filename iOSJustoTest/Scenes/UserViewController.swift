//
//  UserViewController.swift
//  iOSJustoTest
//
//  Created by Alan MuÃ±oz on 14/07/22.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol UserDisplayLogic: AnyObject
{
    func showData(viewModel: UserScene.LoadingData.ViewModel)
}

class UserViewController: UIViewController, UserDisplayLogic
{
    var interactor: UserBusinessLogic?
    var router: (NSObjectProtocol & UserRoutingLogic & UserDataPassing)?
    var listUsers = [User]()
    let userView = UserView()
    var activityIndicator = UIActivityIndicatorView()
    
    var refreshControl = UIRefreshControl()
    
    // MARK: Object lifecycle
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = UserInteractor()
        let presenter = UserPresenter()
        let router = UserRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    override func loadView() {
        view = userView
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        title = "Users"
        userView.tableView.register(UserCell.self, forCellReuseIdentifier: UserCell.cellId)
        userView.tableView.delegate = self
        userView.tableView.dataSource = self
        refreshControl.attributedTitle = NSAttributedString(string: "Refreshing new users.")
        refreshControl.addTarget(self, action: #selector(self.loadData), for: .valueChanged)
        userView.tableView.refreshControl = refreshControl
        loadData()
    }
    
    // MARK: Do something
    
    @objc func loadData()
    {
        let request = UserScene.LoadingData.Request()
        interactor?.doLoadData(request: request)
        refreshControl.endRefreshing()
    }
    
    func showData(viewModel: UserScene.LoadingData.ViewModel)
    {
        listUsers = viewModel.users
        userView.tableView.reloadData()
    }

    
    func loadImage(imageURL urlString: String, userPic imageView: UIImageView) {
        guard let url = URL(string: urlString) else {
            return
        }

        URLSession.shared.dataTask(with: url) { (data, response, error) in
            if let data = data {
                let image = UIImage(data: data)
                DispatchQueue.main.async {
                    imageView.image = image
                    imageView.makeRounded()
                }
            }
        }.resume()
    }
    
}

extension UserViewController: UITableViewDataSource {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return listUsers.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        guard let cell = tableView.dequeueReusableCell(withIdentifier: UserCell.cellId, for: indexPath) as? UserCell else {
            return UITableViewCell()
        }
        
        let user = listUsers[indexPath.row]
        cell.userNameLabel.text = user.name?.first
        cell.userLastNameLabel.text = user.name?.last
        
        self.loadImage(imageURL: user.picture?.medium ?? "", userPic: cell.userImage)
        
        return cell
        
    }
    
    func tableView(_ tableView: UITableView, willDisplay cell: UITableViewCell, forRowAt indexPath: IndexPath) {
        cell.contentView.layer.masksToBounds = true
    }
 
}

extension UserViewController: UITableViewDelegate {
    
}
